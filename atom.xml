<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>imchengliang</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-16T13:54:49.787Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Cheng Liang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Run Word-Count Example of Hadoop on Cloud (Java Version)</title>
    <link href="http://example.com/2022/02/15/hadoop-on-cloud/"/>
    <id>http://example.com/2022/02/15/hadoop-on-cloud/</id>
    <published>2022-02-15T12:19:11.000Z</published>
    <updated>2022-02-16T13:54:49.787Z</updated>
    
    <content type="html"><![CDATA[<p>The main content of this blog is introducing how to run word count example by Hadoop and Java on the cloud, including set up the Hadoop configuration, generate and adjust the Java code for Hadoop, and commands of running Hadoop. Before this, make sure that <a href="https://imchengliang.top/2022/01/21/cloud/">Linux has been installed on your cloud service</a>, both Java and Hadoop are installed on your Linux system.</p><h2 id="word-count-example-in-local-standalone-mode">(1) Word Count Example in Local (Standalone) Mode</h2><p>The Standalone mode refers to an independent Java process that runs on a host and runs in non-distributed mode by default. It uses a local file system instead of a distributed file system and does not require any Hadoop daemons to be loaded.</p><p>The default mode for Hadoop is standalone mode, so once hadoop is installed, we just need to put to data into input folder and run the command directly.</p><p>Firstly, we create the input folder on local filesystem, and then we download the data that can be used for word-count from internet and put it into the input folder. </p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># On Ubuntu linux ‘wget’ command can be used to download data over http</span><br>wget http:<span class="hljs-regexp">//</span>www.gutenberg.org<span class="hljs-regexp">/ebooks/</span><span class="hljs-number">20417</span>.txt.utf-<span class="hljs-number">8</span><br></code></pre></td></tr></tbody></table></figure><p></p><p>After the data is ready, we can run the following command (there is only one command!) to run the canonical MapReduce example.</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/hadoop-3.3.1/</span>bin<span class="hljs-regexp">/hadoop jar /u</span>sr<span class="hljs-regexp">/local/</span>hadoop-<span class="hljs-number">3.3</span>.<span class="hljs-number">1</span><span class="hljs-regexp">/share/</span>hadoop<span class="hljs-regexp">/mapreduce/</span>hadoop*examples*.jar wordcount <span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/wordcount/i</span>nput <span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/wordcount/</span>output<br></code></pre></td></tr></tbody></table></figure><ul><li>The format of this command: /installation directory of Hadoop/bin/hadoop jar /installation directory of Hadoop/share/hadoop/mapreduce/hadoop<em>examples</em>.jar wordcount /path of stored-data /path for the output</li></ul><p>Note: the folder names “input” and “output” are arbitrary - you can choose any names you like for the input and output directories. But the “input” folder should contain the downloaded file. Note that the output folder is created by Hadoop, so you should not create it manually before running the command above.</p><h2 id="word-count-example-in-pseudo-distributed-mode">(2) Word Count Example in Pseudo-Distributed Mode</h2><p>The Pseudo-distributed mode refers to running on one host, using multiple Java processes to imitate various nodes that run in fully distributed mode but not actually be used in production. The pseudo-distributed mode has the main functions of the fully distributed mode.</p><p>Firstly, we need to edit the configuration file to switch Hadoop into pseudo-distributed mode. The two configuration files that are needed to be edited are 'core-site.xml' and 'hdfs-site.xml', and they are located on '/installation directory of Hadoop/etc/hadoop'.</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># core-site.xml</span><br><span class="hljs-params">&lt;configuration&gt;</span><br>    <span class="hljs-params">&lt;property&gt;</span><br>        <span class="hljs-params">&lt;name&gt;</span>fs.defaultFS<span class="hljs-params">&lt;/name&gt;</span><br>        <span class="hljs-params">&lt;value&gt;</span>hdfs:<span class="hljs-comment">//localhost:9000&lt;/value&gt;</span><br>    <span class="hljs-params">&lt;/property&gt;</span><br><span class="hljs-params">&lt;/configuration&gt;</span><br></code></pre></td></tr></tbody></table></figure><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># hdfs-site.xml</span><br><span class="hljs-params">&lt;configuration&gt;</span><br>    <span class="hljs-params">&lt;property&gt;</span><br>        <span class="hljs-params">&lt;name&gt;</span>dfs.replication<span class="hljs-params">&lt;/name&gt;</span><br>        <span class="hljs-params">&lt;value&gt;</span><span class="hljs-number">1</span><span class="hljs-params">&lt;/value&gt;</span><br>    <span class="hljs-params">&lt;/property&gt;</span><br><span class="hljs-params">&lt;/configuration&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>We configurate the global parameters of cluster including HDFS URL and temporary directory of Hadoop by editing core-site.xml. The parameters of HDFS are stored in hdfs-site.xml, such as the storage location of the name node and data node, the number of file copies, the read permission of the file, etc.</li></ul><p>After the configuration files are ready, let's check that if we can ssh to the localhost without a passphrase.</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh localhost<br></code></pre></td></tr></tbody></table></figure><p>If we cannot ssh to localhost without a passphrase, execute the following commands to setup passphraseless ssh</p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$ ssh-keygen -t rsa -P <span class="hljs-string">''</span> -f ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br>$ cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub &gt;&gt; ~<span class="hljs-regexp">/.ssh/</span>authorized_keys<br>$ chmod <span class="hljs-number">0600</span> ~<span class="hljs-regexp">/.ssh/</span>authorized_keys<br></code></pre></td></tr></tbody></table></figure><p>The next step is to use the following commands in the installation directory of Hadoop to start a MapReduce job in pseudo-distributed mode locally. </p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Format the filesystem</span><br>$ bin/hdfs namenode -format<br><span class="hljs-comment"># Start NameNode daemon and DataNode daemon</span><br>$ sbin/start-dfs.sh<br><span class="hljs-comment"># Make the HDFS directories required to execute MapReduce jobs</span><br>$ bin<span class="hljs-regexp">/hdfs dfs -mkdir /u</span>ser<br>$ bin<span class="hljs-regexp">/hdfs dfs -mkdir /u</span>ser/&lt;username&gt;<br></code></pre></td></tr></tbody></table></figure><p></p><p>We can check if the job starts successfully by the command 'jps'. </p><figure class="highlight vala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vala">$ jps<br><span class="hljs-meta"># if the following namenode, datanode, secondarynamenode are all shown, it means that the job has started</span><br><span class="hljs-meta"># 6818 DataNode</span><br><span class="hljs-meta"># 6651 NameNode</span><br><span class="hljs-meta"># 7067 SecondaryNameNode</span><br><span class="hljs-meta"># 91869 Jps</span><br></code></pre></td></tr></tbody></table></figure><p></p><ul><li>DataNode stores data block, NameNode is to accept the read and write requests from client and send them to DataNode, SecondaryNameNode helps NameNode merge edits log to reduce NameNode’s startup time.</li></ul><h2 id="create-and-modify-the-java-code-for-word-count-example">(3) Create and Modify the Java code for Word Count Example</h2><p>Now we write the Java code to count the words in the txt file that is downloaded in step (1), the goal is that the output of the job should thus be a file containing lines like: a number_of_words_starting_with_a_or_A</p><p>First of all, we create and edit the Java file in any path of the local filesystem we want. </p><figure class="highlight irpf90"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs irpf90"><span class="hljs-keyword">touch</span> &lt;Java <span class="hljs-keyword">file</span> <span class="hljs-keyword">name</span>&gt;.java<br>vim &lt;Java <span class="hljs-keyword">file</span> <span class="hljs-keyword">name</span>&gt;,java<br></code></pre></td></tr></tbody></table></figure><p></p><p>The Java code is copied from the <a href="https://hadoop.apache.org/docs/stable/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html">official sample of Apache Hadoop</a>, and then adjust the code based on the requirement above. The two key function mapper and reducer after adjustment are shown as below, the full code can be find in <a href="https://github.com/Imchengliang/Data-Engineering">there</a> </p><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> static <span class="hljs-keyword">class</span> <span class="hljs-symbol">FirstLetterCountMapper</span><br><span class="hljs-symbol">extends</span> <span class="hljs-symbol">Mapper</span>&lt;<span class="hljs-symbol">LongWritable, <span class="hljs-symbol">Text</span>, <span class="hljs-symbol">Text</span>, <span class="hljs-symbol">IntWritable</span></span>&gt; {<br>    @Override<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> map(LongWritable key, Text value, Context context) <br>throws IOException, InterruptedException {<br># change the input data <span class="hljs-built_in">int</span>o <span class="hljs-built_in">string</span> <span class="hljs-keyword">and</span> make all the letters of it be lowercase<br>String line = value.toString().toLowerCase();<br># split the <span class="hljs-built_in">string</span> data <span class="hljs-built_in">int</span>o individual word by blankspace<br>String[] <span class="hljs-built_in">string</span>s = line. split(<span class="hljs-string">" "</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">string</span>s.length; i++) {<br># filter <span class="hljs-keyword">out</span> empty <span class="hljs-built_in">string</span>s<br><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">string</span>s[i] != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">string</span>s[i].isEmpty() ){<br># extract the first letter of <span class="hljs-keyword">this</span> word<br>char firstLetter = <span class="hljs-built_in">string</span>s[i].charAt(<span class="hljs-number">0</span>);<br># find the words begin with a-z <span class="hljs-keyword">and</span> deliver their first letter to reducer <span class="hljs-keyword">class</span><br>    <span class="hljs-symbol">if</span> (<span class="hljs-symbol">firstLetter</span> &gt;= '<span class="hljs-symbol">a</span>' &amp;&amp; <span class="hljs-symbol">firstLetter</span> &lt;= '<span class="hljs-symbol">z</span>') {<br>        context.write(new Text(String.valueOf(firstLetter)), new IntWritable(<span class="hljs-number">1</span>));<br>}<br>                }<br>            }<br>}<br>    } <br><br><span class="hljs-keyword">public</span> static <span class="hljs-keyword">class</span> <span class="hljs-symbol">FirstLetterCountReducer</span><br><span class="hljs-symbol">extends</span> <span class="hljs-symbol">Reducer</span>&lt;<span class="hljs-symbol">Text, <span class="hljs-symbol">IntWritable</span>, <span class="hljs-symbol">Text</span>, <span class="hljs-symbol">IntWritable</span></span>&gt; {<br><span class="hljs-keyword">private</span> IntWritable result = new IntWritable();<br>@Override<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context)  <br>throws IOException, InterruptedException {<br><span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br># count the number of words begin with a-z <span class="hljs-keyword">in</span> a loop<br><span class="hljs-keyword">for</span> (IntWritable val : values) {<br>sum += val.<span class="hljs-keyword">get</span>();<br>            }<br>result.<span class="hljs-keyword">set</span>(sum);<br>context.write(key, result);<br>       }<br>    }<br></code></pre></td></tr></tbody></table></figure><p></p><p>After the file edition is finished, we need to compile the wordcount example and make a jar file. </p><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">cd /directory <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> folder <span class="hljs-keyword">that</span> <span class="hljs-keyword">contains</span> Java <span class="hljs-built_in">file</span><br>javac -cp `/installation directory <span class="hljs-keyword">of</span> Hadoop/bin/hadoop classpath` &lt;Java <span class="hljs-built_in">file</span> <span class="hljs-built_in">name</span>&gt;.java<br>jar -cvf &lt;Java <span class="hljs-built_in">file</span> <span class="hljs-built_in">name</span>&gt;.jar  *.<span class="hljs-built_in">class</span><br></code></pre></td></tr></tbody></table></figure><p></p><p>Now there is a file “<java file="" name="">.jar” in the same folder contains Java file. Next, load the file whose words we are counting into hdfs. </java></p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">/installation <span class="hljs-built_in">directory</span> <span class="hljs-keyword">of</span> Hadoop/bin/hdfs dfs -<span class="hljs-built_in">put</span> /<span class="hljs-built_in">directory</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> data we are going <span class="hljs-built_in">to</span> <span class="hljs-built_in">process</span><br></code></pre></td></tr></tbody></table></figure><p></p><ul><li>There should be a file in hdfs now, and we can check it by this command: /installation directory of Hadoop/bin/hdfs dfs -ls input</li></ul><p>Then, we run the following command to run the Java code in Hadoop. </p><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/installation directory <span class="hljs-keyword">of</span> Hadoop/bin/hadoop jar &lt;Java <span class="hljs-built_in">file</span> <span class="hljs-built_in">name</span>&gt;.jar &lt;Java <span class="hljs-built_in">file</span> <span class="hljs-built_in">name</span>&gt; input output<br></code></pre></td></tr></tbody></table></figure><p></p><p>If the hadoop run completes normally, verify that the output looks as expected. First check the content of the output directory in hdfs. Then check the content of the output file using the ‘-cat’ argument to ‘hdfs dfs’. </p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/installation directory of Hadoop/</span>bin/hdfs dfs -ls output<br><span class="hljs-regexp">/installation directory of Hadoop/</span>bin<span class="hljs-regexp">/hdfs dfs -cat output/</span>part-r-<span class="hljs-number">00000</span><br></code></pre></td></tr></tbody></table></figure><p></p><ul><li>The output files are by default named part-x-yyyyy where: x is either 'm' or 'r', depending on whether the job was a map only job, or reduce. yyyyy is the mapper or reducer task number (zero based).</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The main content of this blog is introducing how to run word count example by Hadoop and Java on the cloud, including set up the Hadoop c</summary>
      
    
    
    
    
    <category term="Cloud Computing, Hadoop" scheme="http://example.com/tags/Cloud-Computing-Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Show the Hidden File on Mac OS</title>
    <link href="http://example.com/2022/01/29/hidden-file/"/>
    <id>http://example.com/2022/01/29/hidden-file/</id>
    <published>2022-01-29T10:09:26.000Z</published>
    <updated>2022-01-29T11:10:56.310Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes we might need to edit the hidden file on Mac such as the configuration file but we don't know the path of this file. Therefore, letting the computer shows the hidden file allows us to locate and edit this file more convenient. This post would introduce two ways to show the hidden file on Mac.</p><h2 id="enter-the-command-of-show-hide-hidden-file">(1) Enter the command of show / hide hidden file</h2><h3 id="we-can-directly-enter-the-following-commands-on-terminal-to-show-or-hide-all-the-hidden-files.">We can directly enter the following commands on terminal to show or hide all the hidden files.</h3><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># Show the hidden files</span><br>defaults <span class="hljs-built_in">write</span> com.apple.finder AppleShowAllFiles -<span class="hljs-built_in">boolean</span> <span class="hljs-literal">true</span>;killall Finder<br><span class="hljs-comment"># Hide the hidden files</span><br>defaults <span class="hljs-built_in">write</span> com.apple.finder AppleShowAllFiles -<span class="hljs-built_in">boolean</span> <span class="hljs-literal">false</span>;killall Finder<br></code></pre></td></tr></tbody></table></figure><h2 id="create-the-sh-file-that-contains-the-two-commands-above-and-use-the-file-to-show-hide-the-hidden-files">(2) Create the SH file that contains the two commands above, and use the file to show / hide the hidden files</h2><h3 id="the-commands-above-is-so-long-that-its-hard-to-remember-and-type-it-correctly.-hence-we-can-store-them-in-the-sh-file-and-each-time-we-run-the-sh-file-can-also-achieve-the-same-effect.">The commands above is so long that it's hard to remember and type it correctly. Hence, we can store them in the SH file, and each time we run the SH file can also achieve the same effect.</h3><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Create the SH files </span><br>touch show_hidden_file.sh<br>touch hide_hidden_file.sh<br><br><span class="hljs-comment"># Write the show_hidden_files_command into show_hidden_file.sh</span><br><span class="hljs-comment"># Write the hide_hidden_files_command into hide_hidden_file.sh</span><br><br><span class="hljs-comment"># Show the hidden files</span><br><span class="hljs-string">./show_hidden_file.sh</span><br><span class="hljs-comment"># Hide the hidden files</span><br><span class="hljs-string">./hide_hidden_file.sh</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sometimes we might need to edit the hidden file on Mac such as the configuration file but we don&#39;t know the path of this file. Therefore,</summary>
      
    
    
    
    
    <category term="Mac" scheme="http://example.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Use SSH to connect the virtual machine on cloud and run jupyter notebook on it</title>
    <link href="http://example.com/2022/01/21/cloud/"/>
    <id>http://example.com/2022/01/21/cloud/</id>
    <published>2022-01-21T08:36:42.000Z</published>
    <updated>2022-01-21T22:30:00.324Z</updated>
    
    <content type="html"><![CDATA[<p>In this blog, I will introduce how to create a virtual machine on openstack (it's a cloud platform), and then using SSH to connect the virtual machine with local computer. After the connection, I will show how to run jupyter notebook on this remote virtual machine.</p><h2 id="create-a-ssh-keypair-on-openstack">(1) Create a SSH-keypair on openstack</h2><h3 id="the-only-method-allowed-to-access-the-cloud-instances-is-via-ssh-keypairs.-usernamepassword-is-disabled-by-default-on-all-cloud-instances-according-to-best-practice-and-should-never-be-enabled-for-security-reasons.">The only method allowed to access the cloud instances is via ssh-keypairs. Username/Password is disabled by default on all cloud instances (according to best practice) and should never be enabled for security reasons.</h3><h3 id="the-openstack-software-helps-us-createimport-keys-and-will-make-sure-that-the-public-keys-are-injected-in-the-instances-you-create.-the-private-key-should-be-private-and-is-for-us-to-safekeep-on-our-clients.">The OpenStack software helps us create/import keys, and will make sure that the public keys are injected in the instances you create. The private key should be private and is for us to safekeep on our clients.</h3><h3 id="in-the-openstack-dashboard-compute---key-pairs---create-key-pair">In the OpenStack dashboard: Compute -&gt; Key Pairs -&gt; Create Key Pair</h3><p>Save the downloaded .pem file in a secure location on computer. We would need it when we want to access the virtual machine instance but we don't need to create a new ssh-keypair each time. <img src="/img/ssh_vm/ssh.png"></p><h2 id="launch-an-instance-of-virtual-machine-on-openstack">(2) Launch an instance of virtual machine on openstack</h2><h3 id="in-the-openstack-dashboard-compute---instances---launch-instance">In the OpenStack dashboard: Compute -&gt; Instances -&gt; Launch instance</h3><h3 id="then-we-can-choose-the-configuration-we-want-for-the-virtual-machine.-for-my-instance-i-choose-ubuntu-20.04-as-the-image-1-vcpus-512-mb-ram-and-20-gb-disk.-we-also-have-to-give-this-instance-a-name-and-it-would-auto-select-to-use-the-key-pair-we-create.-as-for-the-rest-of-the-configuration-i-chose-the-default-for-them.">Then we can choose the configuration we want for the virtual machine. For my instance, I choose ubuntu 20.04 as the image, 1 VCPUS, 512 MB RAM and 20 GB disk. We also have to give this instance a name, and it would auto select to use the key-pair we create. As for the rest of the configuration, I chose the default for them.</h3><p><img src="/img/ssh_vm/configuration.png"></p><h2 id="use-ssh-to-access-the-virtual-machine-from-local-computer">(3) Use SSH to access the virtual machine from local computer</h2><h3 id="before-the-ssh-connection-we-need-to-associate-a-floating-ip-to-the-instance-which-represents-the-ip-address-of-this-virtual-machine.-after-the-ip-setting-we-should-change-the-permission-of-the-downloaded-keypair-file-and-ssh-file-so-that-the-ip-can-access-the-key-and-connect-with-local-computer.-run-the-following-commands-in-terminal-to-change-permission.-...-is-the-path-of-this-file-on-your-computer.">Before the SSH connection, we need to associate a floating IP to the instance, which represents the IP address of this virtual machine. After the IP setting, we should change the permission of the downloaded-keypair file and SSH file so that the IP can access the key and connect with local computer. Run the following commands in terminal to change permission. "/..." is the path of this file on your computer.</h3><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod <span class="hljs-number">400</span> <span class="hljs-regexp">/.../</span>liang_cheng.pem<br>chmod <span class="hljs-number">700</span> <span class="hljs-regexp">/.../</span>.ssh<br>chmod <span class="hljs-number">600</span> <span class="hljs-regexp">/.../</span>.ssh/authorized_keys<br></code></pre></td></tr></tbody></table></figure><h3 id="after-the-permission-change-we-are-able-to-use-ssh-to-access-the-virtual-machine-by-running-the-commands-below.">After the permission-change, we are able to use SSH to access the virtual machine by running the commands below.</h3><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># if the instance uses old volume or snapshot but not a new image as the boot source, </span><br><span class="hljs-comment"># we need to run the next command first before run ssh -i </span><br>ssh-keygen -R floating IP<br>ssh -i <span class="hljs-regexp">/.../</span>liang_cheng.pem ubuntu@floating IP<br></code></pre></td></tr></tbody></table></figure><p><img src="/img/ssh_vm/ubuntu.png"></p><h2 id="install-jupyter-notebook-and-run-it-on-the-virtual-machine">(4) Install jupyter notebook and run it on the virtual machine</h2><h3 id="firstly-we-need-to-install-pip-and-jupyter-notebook-on-the-virtual-machine.">Firstly, we need to install pip and jupyter notebook on the virtual machine.</h3><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># switch to root user first</span><br>sudo su<br>apt install python3-pip<br>pip install jupyter notebook<br><span class="hljs-comment"># if it shows error 'E: Package &lt;packagename&gt; has no installation candidate'</span><br><span class="hljs-comment"># run the following commands and then install pip and jupyter notebook</span><br>apt-<span class="hljs-builtin-name">get</span> update<br>apt-<span class="hljs-builtin-name">get</span> upgrade<br></code></pre></td></tr></tbody></table></figure><h3 id="then-we-edit-the-config-file-of-jupyter-notebook-so-that-we-can-remotely-log-in-it-on-the-local-browser.">Then we edit the config file of jupyter notebook so that we can remotely log in it on the local browser.</h3><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">jupyter notebook --generate-config<br><span class="hljs-keyword">vim</span> /.../jupyter_notebook_config.<span class="hljs-keyword">py</span><br># after entering the <span class="hljs-keyword">file</span>, press button O <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> into <span class="hljs-keyword">edit</span> <span class="hljs-keyword">mode</span><br># <span class="hljs-built_in">add</span> the following three codes into the config <span class="hljs-keyword">file</span><br><span class="hljs-keyword">c</span>.NotebookApp.ip=<span class="hljs-string">'*'</span><br><span class="hljs-keyword">c</span>.NotebookApp.open_browser=False<br><span class="hljs-keyword">c</span>.NotebookApp.port=<span class="hljs-number">8888</span><br># press button esc <span class="hljs-keyword">to</span> turn off <span class="hljs-keyword">edit</span> <span class="hljs-keyword">mode</span>, <span class="hljs-built_in">and</span> <span class="hljs-built_in">type</span> :wq! <span class="hljs-keyword">to</span> save the <span class="hljs-keyword">changes</span> in <span class="hljs-keyword">file</span><br></code></pre></td></tr></tbody></table></figure><h3 id="after-everything-is-set-up-we-can-run-jupyter-notebook.">After everything is set up, we can run jupyter notebook.</h3><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">jupyter notebook <span class="hljs-comment">--allow-root</span><br></code></pre></td></tr></tbody></table></figure><p><img src="/img/ssh_vm/notebook.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In this blog, I will introduce how to create a virtual machine on openstack (it&#39;s a cloud platform), and then using SSH to connect the vi</summary>
      
    
    
    
    
    <category term="Cloud Computing" scheme="http://example.com/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>Install and Control Different Version of Python on Mac</title>
    <link href="http://example.com/2022/01/16/Mac/"/>
    <id>http://example.com/2022/01/16/Mac/</id>
    <published>2022-01-16T20:21:35.000Z</published>
    <updated>2022-01-21T08:39:49.699Z</updated>
    
    <content type="html"><![CDATA[<p>The default version of Python installed on the Mac OS is 2.7, and if we intall Anaconda, the version 3.7 of Python would overwrite the version 2.7 to become the default version of Python in the computer. But now some third-party modules might require the Python version to be 3.8 at least (It's the situation I met when I try to use snscrape, a module for social media data crawler). Under this situation, we need to download and install the right version of Python. When different version of Python exist on the system, we need to arrange them properly to avoid some potential issues.</p><h2 id="download-the-installation-package-from-the-official-website-and-install-it-on-mac">(1) Download the installation package from the official website and install it on Mac</h2><h3 id="choose-macos-64-bit-installer-and-doucble-click-the-installer-file-to-install-after-its-downloaded.-pay-attention-to-the-installation-path-the-default-path-is-libraryframeworkspython.frameworkversions3.8">Choose macOS 64-bit installer, and doucble click the installer file to install after it's downloaded. Pay attention to the installation path, the default path is /Library/Frameworks/Python.framework/Versions/3.8</h3><p><img src="/img/HTCPVOMAC/jieping.png"></p><h2 id="modify-environment-variables">(2) Modify environment variables</h2><h3 id="in-order-to-make-the-newly-installed-python-work-we-have-to-add-its-installation-path-to-environment-variables.-run-vim-.bash_profile-on-terminal-and-then-add-the-following-two-codes-to-bash_profile.">In order to make the newly installed Python work, we have to add its installation path to environment variables. Run vim ~/.bash_profile on terminal, and then add the following two codes to bash_profile.</h3><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># This path is the default installation path, if you install Python to other location, switch this path to your installation path</span><br>export PATH=<span class="hljs-variable">${</span>PATH}<span class="hljs-symbol">:/Library/Frameworks/Python</span>.framework/Versions/<span class="hljs-number">3.8</span>/bin/python3<br><span class="hljs-keyword">alias</span> python=<span class="hljs-string">"/Library/Frameworks/Python.framework/Versions/3.8/bin/python3/python3.8"</span><br></code></pre></td></tr></tbody></table></figure><h3 id="these-are-to-repoint-the-python-command-to-the-newly-installed-version.-after-the-editing-above-run-source-.bash_profile-on-terminal-to-make-the-execution-command-above-take-effect.-then-we-can-run-python--v-on-terminal-to-check-if-the-current-version-matches-with-the-newly-installed-version.">These are to repoint the python command to the newly installed version. After the editing above, run source ~/.bash_profile on terminal to make the execution command above take effect. Then we can run python -V on terminal to check if the current version matches with the newly installed version.</h3><h2 id="install-pip">(3) Install pip</h2><h3 id="if-we-install-multiple-versions-of-python-we-also-need-to-install-different-pip-for-each-version-of-python.-to-install-new-pip-run-the-following-commands-on-terminal.">If we install multiple versions of Python, we also need to install different pip for each version of Python. To install new pip, run the following commands on terminal.</h3><figure class="highlight dsconfig"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">curl</span> <span class="hljs-string">https</span>://<span class="hljs-string">bootstrap</span>.<span class="hljs-string">pypa</span>.<span class="hljs-string">io</span>/<span class="hljs-built_in">get-pip.py</span> -<span class="hljs-string">o</span> <span class="hljs-built_in">get-pip.py</span><br><span class="hljs-comment"># the number after python means your Python version, you can change it to match your Python version</span><br><span class="hljs-string">python3</span>.<span class="hljs-string">8</span> <span class="hljs-built_in">get-pip.py</span><br></code></pre></td></tr></tbody></table></figure><h3 id="every-time-pip-is-installed-it-will-modify-the-python-version-corresponding-to-the-default-pip.-then-we-should-run-the-following-code-on-terminal-to-check-which-pip-is-corresponding-with-which-python">Every time pip is installed, it will modify the Python version corresponding to the default pip. Then we should run the following code on terminal to check which pip is corresponding with which Python</h3><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># the number behind pip means the serial number of pip, if you have n pip, then run these till pipn -V</span><br><span class="hljs-attribute">pip</span> -V<br>pip2 -V<br>pip3 -V<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The default version of Python installed on the Mac OS is 2.7, and if we intall Anaconda, the version 3.7 of Python would overwrite the ve</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Singular Value Decomposition (SVD)</title>
    <link href="http://example.com/2022/01/14/post-1/"/>
    <id>http://example.com/2022/01/14/post-1/</id>
    <published>2022-01-14T07:49:04.000Z</published>
    <updated>2022-02-06T14:37:05.731Z</updated>
    
    <content type="html"><![CDATA[<p>Singular Value Decomposition (SVD) is a complex computation in Linear Algebra, and it's widely used in recommendation system. By SVD, the input user-ratings matrix can be divided into three different matrices: user-features, features-features and item-features matrices. This post is to show the full calculation process of SVD and explain each step among it.</p><h2 id="the-format-of-svd">The format of SVD:</h2><h3 id="m-u-sigma-vt-m-is-the-input-mn-matrix-u-are-the-left-singular-vectors-mk-matrix-sigma-are-the-diagonal-matrix-kk-matrix-v-are-the-right-singular-vectors-nk-matrix."><span class="math display">\[M = U \Sigma V^T\]</span> M is the input m*n matrix, <span class="math inline">\(U\)</span> are the left singular vectors (m*k matrix), <span class="math inline">\(\Sigma\)</span> are the diagonal matrix (k*k matrix), <span class="math inline">\(V\)</span> are the right singular vectors (n*k matrix).</h3><h2 id="step-1-transfer-m-into-a-square-matrix">Step 1: Transfer M into a square matrix</h2><h3 id="in-order-to-finsh-svd-we-need-to-know-the-eigenvalues-of-the-input-matrix-at-first.-but-m-is-not-always-a-square-matrix-and-it-might-be-retangular-matrix-sometimes.-so-firstly-we-need-to-transfer-m-into-a-square-matrix-by-multiplying-m-with-its-transpose.">In order to finsh SVD, we need to know the eigenvalues of the input matrix at first. But M is not always a square matrix, and it might be retangular matrix sometimes. So firstly, we need to transfer M into a square matrix by multiplying M with its transpose.</h3><p><span class="math display">\[M=\left[\begin{array}{ll}1 &amp; 1 \\0 &amp; 3 \\3 &amp; 0\end{array}\right], \quad \quad M^{\top} M=\left[\begin{array}{lll}1 &amp; 0 &amp; 3 \\1 &amp; 3 &amp; 0\end{array}\right] \cdot\left[\begin{array}{ll}1 &amp; 1 \\0 &amp; 3 \\3 &amp; 0\end{array}\right]=\left[\begin{array}{ll}10 &amp; 1 \\1 &amp; 10\end{array}\right]\]</span></p><h2 id="step-2-calculate-the-eigenvalues">Step 2: Calculate the eigenvalues</h2><h3 id="to-get-the-eigenvalues-we-need-to-calculate-the-determinant-of-mtop-m---lambda-i.-in-the-computation-of-this-determinant-a-polynomial-is-obtained-and-the-results-of-this-polynomial-are-the-eigenvalues.">To get the eigenvalues, we need to calculate the determinant of <span class="math inline">\(M^{\top} M - \lambda I\)</span>. In the computation of this determinant, a polynomial is obtained, and the results of this polynomial are the eigenvalues.</h3><p><span class="math display">\[M^{\top} M - \lambda I=\left[\begin{array}{ll}10 - \lambda &amp; 1 \\1 &amp; 10 - \lambda\end{array}\right], \quad \quad \begin{aligned}\operatorname{det}\left(M^{\top} M-\lambda I\right) &amp;=\left(10-\lambda)^{2}-1\right.\\\lambda &amp;=11 \quad or \quad 9\end{aligned}\]</span></p><h3 id="so-the-eigenvalues-of-mtop-m-are-11-and-9.">So the eigenvalues of <span class="math inline">\(M^{\top} M\)</span> are 11 and 9.</h3><h2 id="step-3-calculate-the-eigenvectors">Step 3: Calculate the eigenvectors</h2><h3 id="after-the-calculation-of-eigenvalues-the-next-step-is-to-calculate-the-eigenvectors-for-each-eigenvalue.-first-we-plug-the-eigenvalues-sequently-as-the-value-of-lambda-into-mtop-m---lambda-i-to-get-a-matrix.-to-obtain-eigenvectors-we-also-have-the-know-the-null-space-of-this-matrix.-therefore-we-set-a-vector-as-a-and-calculate-a-through-the-equation-mtop-m---lambda-ia0.-after-that-we-convert-the-vector-into-an-unit-vector-and-this-unit-vector-is-the-eigenvector.">After the calculation of eigenvalues, the next step is to calculate the eigenvectors for each eigenvalue. First we plug the eigenvalues sequently as the value of <span class="math inline">\(\lambda\)</span> into <span class="math inline">\(M^{\top} M - \lambda I\)</span> to get a matrix. To obtain eigenvectors, we also have the know the null space of this matrix. Therefore, we set a vector as <span class="math inline">\(A\)</span> and calculate <span class="math inline">\(A\)</span> through the equation <span class="math inline">\((M^{\top} M - \lambda I)*A=0\)</span>. After that, we convert the vector into an unit vector, and this unit vector is the eigenvector.</h3><p><span class="math display">\[For \quad \lambda = 9, \quad M^{\top} M - 9I=\left[\begin{array}{ll}1 &amp; 1 \\1 &amp; 1\end{array}\right]\]</span> <span class="math display">\[\begin{gathered}\left(M^{\top} M-9 I\right) * A=\left[\begin{array}{ll}1 &amp; 1 \\1 &amp; 1\end{array}\right] \cdot\left[\begin{array}{l}a_{1} \\a_{2}\end{array}\right], \quad{\left[\begin{array}{l}a_{1} \\a_{2}\end{array}\right]=\left[\begin{array}{c}1 \\-1\end{array}\right]}\end{gathered}\]</span> <span class="math display">\[\sqrt{a_{1}{ }^{2}+a_{2}{ }^{2}}=\sqrt{2}, \quad \text { eigenvector: }\left[\begin{array}{l}a_{1} / \sqrt{2} \\a_{2} / \sqrt{2}\end{array}\right]=\left[\begin{array}{c}1 / \sqrt{2} \\-1 / \sqrt{2}\end{array}\right]\]</span> <span class="math display">\[\\\]</span> <span class="math display">\[For \quad \lambda = 10, \quad M^{\top} M - 10I=\left[\begin{array}{ll}-1 &amp;  1 \\1 &amp; -1\end{array}\right]\]</span> <span class="math display">\[\begin{gathered}\left(M^{\top} M-10 I\right) * A=\left[\begin{array}{ll}-1 &amp;  1 \\1 &amp; -1\end{array}\right] \cdot\left[\begin{array}{l}a_{1} \\a_{2}\end{array}\right], \quad{\left[\begin{array}{l}a_{1} \\a_{2}\end{array}\right]=\left[\begin{array}{c}1 \\1\end{array}\right]}\end{gathered}\]</span> <span class="math display">\[\sqrt{a_{1}{ }^{2}+a_{2}{ }^{2}}=\sqrt{2}, \quad \text { eigenvector: }\left[\begin{array}{l}a_{1} / \sqrt{2} \\a_{2} / \sqrt{2}\end{array}\right]=\left[\begin{array}{c}1 / \sqrt{2} \\1 / \sqrt{2}\end{array}\right]\]</span></p><h2 id="step-4-construct-sigma-diagonal-matrix-and-v-right-singular-vectors">Step 4: Construct <span class="math inline">\(\Sigma\)</span> (diagonal matrix) and V (right singular vectors)</h2><h3 id="for-sigma-the-diagonal-elements-are-the-square-root-of-eigenvalues-and-the-rest-are-all-zero.-for-v-it-consists-of-eigenvectors-and-each-eigenvector-represents-one-column-of-data-in-the-matrix.">For <span class="math inline">\(\Sigma\)</span>, the diagonal elements are the square root of eigenvalues and the rest are all zero. For V, it consists of eigenvectors and each eigenvector represents one column of data in the matrix.</h3><p><span class="math display">\[V=\left[\begin{array}{cc}1 / \sqrt{2} &amp; -1 / \sqrt{2} \\1 / \sqrt{2} &amp; 1 / \sqrt{2}\end{array}\right], \quad D=\left[\begin{array}{cc}\sqrt{11} &amp; 0 \\0 &amp; \sqrt{9}\end{array}\right]\]</span></p><h2 id="step-5-calculate-u-left-singular-vectors">Step 5: Calculate U (left singular vectors)</h2><h3 id="from-mu-sigma-vt-we-get-umv-sigmat.-first-we-compute-mv-and-change-the-vectors-in-this-matrix-into-unit-vector.-then-we-compute-mv-sigmat.-after-this-computation-we-make-a-unit-vector-transformation-again-and-this-is-the-result-of-u.">From <span class="math inline">\(M=U \Sigma V^T\)</span>, we get <span class="math inline">\(U=MV \Sigma^T\)</span>. First we compute <span class="math inline">\(MV\)</span> and change the vectors in this matrix into unit vector. Then we compute <span class="math inline">\(MV \Sigma^T\)</span>. After this computation, we make a unit vector transformation again, and this is the result of <span class="math inline">\(U\)</span>.</h3><p><span class="math display">\[MV = \left[\begin{array}{ll}1 &amp; 1 \\0 &amp; 3 \\3 &amp; 0\end{array}\right] \cdot\left[\begin{array}{l}1/\sqrt{2} &amp; -1/\sqrt{2} \\1/\sqrt{2} &amp; 1/\sqrt{2}\end{array}\right] = \left[\begin{array}{l}\frac{2}{\sqrt{2}} &amp; 0 \\\frac{3}{\sqrt{2}} &amp; \frac{3}{\sqrt{2}} \\\frac{3}{\sqrt{2}} &amp; -\frac{3}{\sqrt{2}}\end{array}\right]\]</span> <span class="math display">\[\sqrt{(\frac{2}{\sqrt{2}})^2+(\frac{3}{\sqrt{2}})^2+(\frac{3}{\sqrt{2}})^2}=\frac{\sqrt{22}}{\sqrt{2}}, \quad \sqrt{0^2+(\frac{3}{\sqrt{2}})^2+(\frac{3}{\sqrt{2}})^2}=\frac{\sqrt{18}}{\sqrt{2}}\]</span> <span class="math display">\[MV=\left[\begin{array}{l}\frac{2}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{22}} &amp; 0 \cdot \frac{\sqrt{2}}{\sqrt{18}} \\\frac{3}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{22}} &amp; \frac{3}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{18}}\\\frac{3}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{22}} &amp; -\frac{3}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{18}}\end{array}\right] = \left[\begin{array}{l}\frac{2}{\sqrt{22}} &amp; 0 \\\frac{3}{\sqrt{22}} &amp; \frac{3}{\sqrt{18}} \\\frac{3}{\sqrt{22}} &amp; -\frac{3}{\sqrt{18}}\end{array}\right]\]</span> <span class="math display">\[MVD^T = \left[\begin{array}{l}\frac{2}{\sqrt{22}} &amp; 0 \\\frac{3}{\sqrt{22}} &amp; \frac{3}{\sqrt{18}} \\\frac{3}{\sqrt{22}} &amp; -\frac{3}{\sqrt{18}}\end{array}\right] \cdot \left[\begin{array}{cc}\sqrt{11} &amp; 0 \\0 &amp; \sqrt{9}\end{array}\right] = \left[\begin{array}{l}\frac{2\sqrt{11}}{\sqrt{22}} &amp; 0 \\\frac{3\sqrt{11}}{\sqrt{22}} &amp; \frac{3\sqrt{9}}{\sqrt{18}} \\\frac{3\sqrt{11}}{\sqrt{22}} &amp; -\frac{3\sqrt{9}}{\sqrt{18}}\end{array}\right] = \left[\begin{array}{l}\frac{2}{\sqrt{2}} &amp; 0 \\\frac{3}{\sqrt{2}} &amp; \frac{3}{\sqrt{2}} \\\frac{3}{\sqrt{2}} &amp; -\frac{3}{\sqrt{2}}\end{array}\right]\]</span> <span class="math display">\[\sqrt{(\frac{2}{\sqrt{2}})^2+(\frac{3}{\sqrt{2}})^2+(\frac{3}{\sqrt{2}})^2}=\frac{\sqrt{22}}{\sqrt{2}}, \quad \sqrt{0^2+(\frac{3}{\sqrt{2}})^2+(\frac{3}{\sqrt{2}})^2}=\frac{\sqrt{18}}{\sqrt{2}}\]</span> <span class="math display">\[MV\Sigma^T = \left[\begin{array}{l}\frac{2}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{22}} &amp; 0 \cdot \frac{\sqrt{2}}{\sqrt{18}} \\\frac{3}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{22}} &amp; \frac{3}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{18}}\\\frac{3}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{22}} &amp; -\frac{3}{\sqrt{2}} \cdot \frac{\sqrt{2}}{\sqrt{18}}\end{array}\right] = \left[\begin{array}{l}\frac{2}{\sqrt{22}} &amp; 0 \\\frac{3}{\sqrt{22}} &amp; \frac{3}{\sqrt{18}} \\\frac{3}{\sqrt{22}} &amp; -\frac{3}{\sqrt{18}}\end{array}\right] = U\]</span></p><h2 id="the-5-steps-above-is-the-full-procedure-of-svd.-after-all-u-sigma-v-are-obtain-we-should-compute-usigma-vt-to-check-if-the-result-is-equal-to-m.-this-is-to-verify-the-svd-we-make-is-right.">*The 5 steps above is the full procedure of SVD. After all <span class="math inline">\(U\)</span>, <span class="math inline">\(\Sigma\)</span>, <span class="math inline">\(V\)</span> are obtain, we should compute <span class="math inline">\(U\Sigma V^T\)</span> to check if the result is equal to <span class="math inline">\(M\)</span>. This is to verify the SVD we make is right.</h2><h2 id="svd-in-python">SVD in Python</h2><h3 id="we-can-use-numpy-to-construct-a-matrix-in-python.-the-module-linalg-in-numpy-offers-many-functions-of-matrix-operation">We can use numpy to construct a matrix in Python. The module linalg in numpy offers many functions of matrix operation</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> numpy as np<br><span class="hljs-attribute">M</span> = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">0</span>]])<br><span class="hljs-comment"># VT is the Transpose of V, if we want the matrix V, use VT.T</span><br><span class="hljs-attribute">U</span>, Sigma, VT = np.linalg.svd(M, full_matrices=True)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Singular Value Decomposition (SVD) is a complex computation in Linear Algebra, and it&#39;s widely used in recommendation system. By SVD, the</summary>
      
    
    
    
    
    <category term="Linear Algebra" scheme="http://example.com/tags/Linear-Algebra/"/>
    
  </entry>
  
  <entry>
    <title>Vector Space</title>
    <link href="http://example.com/2021/12/23/post/"/>
    <id>http://example.com/2021/12/23/post/</id>
    <published>2021-12-23T14:15:11.000Z</published>
    <updated>2022-01-14T09:56:44.980Z</updated>
    
    <content type="html"><![CDATA[<p>In mathematics, vector space is a set of objects that can be operated(added, multipled and so on) together with number</p><h2 id="a-vector-space-is-a-triplev-.-and-it-must-obey-the-following-9-rules">A vector space is a triple(V, +, .) and it must obey the following 9 rules:</h2><h3 id="closure-by-addition-forall-u-w-in-v-quad-uw-in-v-2-additive-associality-forall-u-v-w-in-v-quad-uvwuvw-3-additive-commutativity-forall-u-w-in-v-quad-uw-wu-4-additive-identity-exists-0-in-v-quad-u0-0u-5-additive-inverse-forall-u-in-v-quad--u-in-v-quad-s.t.-quad--uuu-u0-6-closure-by-scalar-multiplication-forall-k-in-r-quad-and-quad-u-in-v-quad-ku-in-v-7-multiplicative-associality-forall-kl-in-r-quad-and-quad-u-in-v-quad-kluklu-8-multiplicative-identity-exists-1-in-v-quad-1uu-9-distributive-property-forall-k-in-r-quad-and-quad-uw-in-v-quad-kuwkukw-forall-kl-in-r-quad-and-quad-u-in-v-quad-klukulu-notice-the-two-operation-in-a-triple-is-not-necessary-to-be-add-and-multiply">(1) Closure by addition: <span class="math display">\[ \forall u, w \in V, \quad u+w \in V \]</span> (2) Additive associality: <span class="math display">\[ \forall u, v, w \in V, \quad (u+v)+w=u+(v+w) \]</span> (3) Additive commutativity: <span class="math display">\[ \forall u, w \in V, \quad u+w = w+u \]</span> (4) Additive identity: <span class="math display">\[ \exists 0 \in V, \quad u+0 = 0+u \]</span> (5) Additive inverse: <span class="math display">\[ \forall u \in V, \quad -u \in V \quad s.t. \quad (-u)+u=u+(-u)=0 \]</span> (6) Closure by scalar multiplication: <span class="math display">\[ \forall k \in R \quad and \quad u \in V, \quad k*u \in V \]</span> (7) Multiplicative associality: <span class="math display">\[ \forall k,l \in R \quad and \quad u \in V, \quad (k*l)*u=k*(l*u)  \]</span> (8) Multiplicative identity: <span class="math display">\[ \exists 1 \in V, \quad 1*u=u\]</span> (9) Distributive property: <span class="math display">\[  \forall k \in R \quad and \quad u,w \in V, \quad k*(u+w)=k*u+k*w \]</span> <span class="math display">\[ \forall k,l \in R \quad and \quad u \in V, \quad (k+l)*u=k*u+l*u \]</span> *notice: the two operation in a triple is not necessary to be add and multiply</h3><h2 id="example-let-vr_0-be-the-set-of-strictly-positive-real-numbers.-let-u-boxplus-v-uv-for-all-uv-in-v-and-k-odot-uuk-for-all-u-in-v-and-k-in-r.-show-that-v-boxplus-odot-is-a-vector-space.">Example: Let $ V=R_{&gt;0} $ be the set of strictly positive real numbers. Let <span class="math inline">\(u \boxplus v = u*v\)</span> for all <span class="math inline">\(u,v \in V\)</span> and <span class="math inline">\(k \odot u=u^k\)</span> for all <span class="math inline">\(u \in V\)</span> and <span class="math inline">\(k \in R\)</span>. Show that <span class="math inline">\((V, \boxplus, \odot)\)</span> is a vector space.</h2><h3 id="let-uv-in-v-then-u-boxplus-v-uv-because-u-and-v-both-are-positive-real-number-therefore-u-v-is-also-a-positive-real-number-so-v-is-closure-under-boxplus.">Let <span class="math inline">\(u,v \in V\)</span>, then <span class="math inline">\(u \boxplus v = u*v\)</span> <br> <span class="math inline">\(\because u\)</span> and <span class="math inline">\(v\)</span> both are positive real number <br> <span class="math inline">\(\therefore u * v\)</span> is also a positive real number, so V is closure under <span class="math inline">\(\boxplus\)</span>.</h3><h3 id="let-v1-in-v-then-v-boxplus-1-v1-v-therefore-v-has-boxplus-identity.">Let <span class="math inline">\(v,1 \in V\)</span>, then <span class="math inline">\(v \boxplus 1 = v*1 = v\)</span> <br> <span class="math inline">\(\therefore\)</span> V has <span class="math inline">\(\boxplus\)</span> identity.</h3><h3 id="let-v-in-v-and-its-boxplus-identity-1-then-v-boxplus-1vv1v1-therefore-v-has-boxplus-inverse.">Let <span class="math inline">\(v \in V\)</span> and its <span class="math inline">\(\boxplus\)</span> identity <span class="math inline">\(=1\)</span>, then <span class="math inline">\(v \boxplus (1/v)=v*(1/v)=1\)</span>, <br> <span class="math inline">\(\therefore\)</span> V has <span class="math inline">\(\boxplus\)</span> inverse.</h3><h3 id="let-uvx-in-v-then-u-boxplus-v-boxplus-xu-boxplus-vxuvxu-boxplus-vxu-boxplus-v-boxplus-x-therefore-v-has-boxplus-associality.">Let <span class="math inline">\(u,v,x \in V\)</span>, then <span class="math inline">\(u \boxplus (v \boxplus x)=u \boxplus (v*x)=u*v*x=(u \boxplus v)*x=(u \boxplus v) \boxplus x\)</span> <br> <span class="math inline">\(\therefore\)</span> V has <span class="math inline">\(\boxplus\)</span> associality.</h3><h3 id="let-uv-in-v-then-u-boxplus-vuvvuv-boxplus-u-therefore-v-has-boxplus-commutativity.">Let <span class="math inline">\(u,v \in V\)</span>, then <span class="math inline">\(u \boxplus v=u*v=v*u=v \boxplus u\)</span> <br> <span class="math inline">\(\therefore\)</span> V has <span class="math inline">\(\boxplus\)</span> commutativity.</h3><h3 id="let-v-in-v-k-in-r-then-k-odot-v-vk-because-v-is-a-positive-real-number-and-k-is-a-real-number-therefore-vk-is-also-a-positive-real-number-so-v-is-closure-under-odot.">Let <span class="math inline">\(v \in V\)</span>, <span class="math inline">\(k \in R\)</span>, then <span class="math inline">\(k \odot v = v^k\)</span> <br> <span class="math inline">\(\because v\)</span> is a positive real number and <span class="math inline">\(k\)</span> is a real number <br> <span class="math inline">\(\therefore\)</span> $v^k $ is also a positive real number, so V is closure under <span class="math inline">\(\odot\)</span>.</h3><h3 id="let-v-in-v-then-1-odot-vv1v-therefore-v-has-odot-identity.">Let <span class="math inline">\(v \in V\)</span>, then <span class="math inline">\(1 \odot v=v^1=v\)</span> <br> <span class="math inline">\(\therefore\)</span> V has <span class="math inline">\(\odot\)</span> identity.</h3><h3 id="let-v-in-v-and-ab-in-r-then-b-odot-a-odot-vvabb-odot-vab-odot-a-odot-v-therefore-v-has-odot-associality.">Let <span class="math inline">\(v \in V\)</span> and <span class="math inline">\(a,b \in R\)</span>, then <span class="math inline">\((b \odot a) \odot v=(v^a)^b=b \odot v^a=b \odot (a \odot v)\)</span> <br> <span class="math inline">\(\therefore\)</span> V has <span class="math inline">\(\odot\)</span> associality.</h3><h3 id="let-uv-in-v-and-ab-in-r-then-a-odot-u-boxplus-va-odot-uvuvaua-vaa-odot-u-boxplus-a-odot-v-and-a-boxplus-b-odot-uab-odot-uuabua-uba-odot-u-boxplus-b-odot-u-therefore-v-has-distributive-property.">Let <span class="math inline">\(u,v \in V\)</span> and <span class="math inline">\(a,b \in R\)</span>, <br> then <span class="math inline">\(a \odot (u \boxplus v)=a \odot (u*v)=(u*v)^a=u^a * v^a=(a \odot u) \boxplus (a \odot v)\)</span> <br> and <span class="math inline">\((a \boxplus b) \odot u=(a*b) \odot u=u^{a*b}=u^a * u^b=(a \odot u) \boxplus (b \odot u)\)</span> <br> <span class="math inline">\(\therefore\)</span> V has distributive property.</h3><h3 id="therefore-v-fits-all-9-rules-and-its-a-vector-space.">Therefore V fits all 9 rules and it's a vector space.</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In mathematics, vector space is a set of objects that can be operated(added, multipled and so on) together with number&lt;/p&gt;
&lt;h2 id=&quot;a-vect</summary>
      
    
    
    
    
    <category term="Linear Algebra" scheme="http://example.com/tags/Linear-Algebra/"/>
    
  </entry>
  
</feed>
